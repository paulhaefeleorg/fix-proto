plugins {
    id 'java'
    id 'application'
    id 'me.champeau.jmh' version '0.7.2'   // JMH plugin
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // FIX engine (classic TPS baseline)
    implementation 'org.quickfixj:quickfixj-core:2.3.1'
    implementation 'org.quickfixj:quickfixj-messages-fix44:2.3.1'

    // Chronicle libraries (OHS path)
    implementation 'net.openhft:chronicle-queue:5.27ea8'
    implementation 'net.openhft:chronicle-wire:2.27ea11'
    implementation 'net.openhft:chronicle-bytes:2.27ea7'

    // Disruptor (lock-free ring buffer)
    implementation 'com.lmax:disruptor:3.4.4'

    // Benchmarking + latency histograms
    jmh 'org.openjdk.jmh:jmh-core:1.38'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.38'
    implementation 'org.hdrhistogram:HdrHistogram:2.1.12'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

application {
    // You can change this later; placeholder main class
    mainClass = 'com.fixperformance.Main'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

test {
    useJUnitPlatform()
}

tasks.register('runOffHeap', JavaExec) {
    group = 'application'
    description = 'Runs the OffHeap main'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.fixperformance.offheap.OffHeapMain'
}

tasks.register('runThreadPool', JavaExec) {
    group = 'application'
    description = 'Runs the ThreadPool main'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.fixperformance.threadpool.ThreadPoolMain'
}

tasks.register('runBenchmark', JavaExec) {
    group = 'application'
    description = 'Runs the Benchmark main'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.fixperformance.benchmark.BenchmarkMain'
}

// Fat JAR that includes all runtime dependencies
tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Assembles a fat jar containing all runtime dependencies.'
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes('Main-Class': 'com.fixperformance.Main')
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

// Ensure fat jar is produced on build
tasks.named('build') {
    dependsOn(tasks.named('fatJar'))
}


